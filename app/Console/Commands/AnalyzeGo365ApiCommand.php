<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Backend\ApiProviderModel;
use App\Models\Backend\ApiFieldMappingModel;
use App\Models\Backend\ApiPromotionRuleModel;
use Illuminate\Support\Facades\Http;

class AnalyzeGo365ApiCommand extends Command
{
    protected $signature = 'api:analyze-go365';
    protected $description = '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå GO365 API ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö hardcode ‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';

    public function handle()
    {
        $this->info('=== ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå GO365 API ===');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GO365 provider ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        $this->checkGo365Provider();
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå hardcode ‡∏à‡∏≤‡∏Å ApiController
        $this->analyzeHardcode();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoint
        $this->testApiEndpoint();
        
        // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GO365 provider
        $this->recommendSetup();
        
        return 0;
    }
    
    private function checkGo365Provider()
    {
        $this->info("\n--- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GO365 Provider ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---");
        
        $go365 = ApiProviderModel::where('code', 'go365')->first();
        
        if ($go365) {
            $this->info("‚úÖ ‡∏û‡∏ö GO365 Provider:");
            $this->info("   ID: {$go365->id}");
            $this->info("   Name: {$go365->name}");
            $this->info("   Code: {$go365->code}");
            $this->info("   Base URL: " . ($go365->base_url ?? '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'));
            $this->info("   API Endpoint: " . ($go365->api_endpoint ?? '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'));
            $this->info("   Status: " . ($go365->status ?? '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'));
            
            $fieldMappings = $go365->fieldMappings()->count();
            $promotionRules = $go365->promotionRules()->count();
            
            $this->info("   Field Mappings: {$fieldMappings}");
            $this->info("   Promotion Rules: {$promotionRules}");
            
            if ($fieldMappings == 0) {
                $this->warn("   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Field Mappings");
            }
            
            if ($promotionRules == 0) {
                $this->warn("   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Promotion Rules");
            }
            
        } else {
            $this->error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GO365 Provider ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ providers ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
            $similarProviders = ApiProviderModel::where('name', 'like', '%365%')
                ->orWhere('code', 'like', '%365%')
                ->orWhere('name', 'like', '%go%')
                ->get();
            
            if ($similarProviders->count() > 0) {
                $this->info("   Providers ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô:");
                foreach ($similarProviders as $provider) {
                    $this->info("   - {$provider->name} ({$provider->code})");
                }
            }
        }
    }
    
    private function analyzeHardcode()
    {
        $this->info("\n--- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Hardcode ‡πÉ‡∏ô ApiController ---");
        
        $hardcodeInfo = [
            'api_url' => 'https://api.kaikongservice.com/api/v1/tours/search',
            'detail_url' => 'https://api.kaikongservice.com/api/v1/tours/detail/{tour_id}',
            'api_key_env' => 'GO365_API_KEY',
            'headers' => [
                'Content-Type' => 'application/json',
                'x-api-key' => 'env(GO365_API_KEY)'
            ],
            'wholesale_id' => 41,
            'api_type' => 'go365',
            'endpoints' => [
                'tours_search' => '/api/v1/tours/search',
                'tour_detail' => '/api/v1/tours/detail/{id}'
            ]
        ];
        
        $this->info("API Base URL: {$hardcodeInfo['api_url']}");
        $this->info("Detail Endpoint: {$hardcodeInfo['detail_url']}");
        $this->info("Wholesale ID: {$hardcodeInfo['wholesale_id']}");
        $this->info("API Type: {$hardcodeInfo['api_type']}");
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå field mappings ‡∏à‡∏≤‡∏Å hardcode
        $this->analyzeFieldMappings();
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå promotion rules ‡∏à‡∏≤‡∏Å hardcode
        $this->analyzePromotionRules();
    }
    
    private function analyzeFieldMappings()
    {
        $this->info("\n--- Field Mappings ‡∏à‡∏≤‡∏Å Hardcode ---");
        
        $tourFields = [
            'api_id' => 'tour_id',
            'code1' => 'tour_code', 
            'name' => 'tour_name',
            'description' => 'tour_description',
            'image' => 'tour_cover_image',
            'country_id' => 'tour_country[].country_code_2',
            'airline_id' => 'tour_airline.airline_iata',
            'pdf_file' => 'tour_file.file_pdf'
        ];
        
        $periodFields = [
            'period_api_id' => 'period_id',
            'start_date' => 'period_date',
            'end_date' => 'period_back',
            'day' => 'tour_num_day',
            'night' => 'tour_num_night',
            'price1' => 'period_rate_adult_twn',
            'price2' => 'period_rate_adult_sgl (calculated)',
            'price3' => 'period_rate_adult_twn (same as price1)',
            'price4' => 'period_rate_adult_twn (same as price1)',
            'group' => 'period_quota',
            'count' => 'period_available',
            'status_period' => 'period_visible'
        ];
        
        $this->info("TOUR Fields:");
        foreach ($tourFields as $local => $api) {
            $this->info("  {$local} => {$api}");
        }
        
        $this->info("\nPERIOD Fields:");
        foreach ($periodFields as $local => $api) {
            $this->info("  {$local} => {$api}");
        }
    }
    
    private function analyzePromotionRules()
    {
        $this->info("\n--- Promotion Rules ‡∏à‡∏≤‡∏Å Hardcode ---");
        
        $this->info("‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 3789-3795):");
        $this->info("1. maxCheck >= 30 ‚Üí promotion1='Y', promotion2='N' (‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ)");
        $this->info("2. maxCheck > 0 && maxCheck < 30 ‚Üí promotion1='N', promotion2='Y' (‡πÇ‡∏õ‡∏£‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)");
        $this->info("3. else ‚Üí promotion1='N', promotion2='N' (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô)");
        
        $this->warn("‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: maxCheck = max(cal1, cal2, cal3, cal4) ‡πÅ‡∏ï‡πà‡πÉ‡∏ô GO365 ‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤ cal = 0");
        $this->warn("   ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì special_price ‡πÉ‡∏ô GO365 API");
    }
    
    private function testApiEndpoint()
    {
        $this->info("\n--- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoint ---");
        
        $apiKey = env('GO365_API_KEY');
        if (!$apiKey) {
            $this->error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GO365_API_KEY ‡πÉ‡∏ô .env");
            return;
        }
        
        try {
            $response = Http::withHeaders([
                'Content-Type' => 'application/json',
                'x-api-key' => $apiKey
            ])->timeout(10)->get('https://api.kaikongservice.com/api/v1/tours/search');
            
            if ($response->successful()) {
                $data = $response->json();
                $this->info("‚úÖ API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                
                if (isset($data['data']) && is_array($data['data'])) {
                    $count = count($data['data']);
                    $this->info("   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô tours: {$count}");
                    
                    if ($count > 0) {
                        $firstTour = $data['data'][0];
                        $this->info("   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tour ‡πÅ‡∏£‡∏Å:");
                        $this->info("   - tour_id: " . ($firstTour['tour_id'] ?? 'N/A'));
                        $this->info("   - tour_name: " . ($firstTour['tour_name'] ?? 'N/A'));
                        $this->info("   - tour_code: " . ($firstTour['tour_code'] ?? 'N/A'));
                    }
                } else {
                    $this->warn("   ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tours ‡πÉ‡∏ô response");
                }
                
            } else {
                $this->error("‚ùå API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . $response->status());
            }
            
        } catch (\Exception $e) {
            $this->error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: " . $e->getMessage());
        }
    }
    
    private function recommendSetup()
    {
        $this->info("\n--- ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GO365 API ---");
        
        $go365 = ApiProviderModel::where('code', 'go365')->first();
        
        if (!$go365) {
            $this->info("üîß ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GO365 Provider:");
            $this->info("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Provider ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            $this->info("2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î field mappings");
            $this->info("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á promotion rules");
            $this->info("4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
            
            if ($this->confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GO365 Provider ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                $this->createGo365Provider();
            }
        } else {
            $this->info("üîß ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á GO365 Provider:");
            
            if ($go365->fieldMappings()->count() == 0) {
                $this->info("1. ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° field mappings");
                if ($this->confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° field mappings ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                    $this->createFieldMappings($go365);
                }
            }
            
            if ($go365->promotionRules()->count() == 0) {
                $this->info("2. ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° promotion rules");
                if ($this->confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° promotion rules ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                    $this->createPromotionRules($go365);
                }
            }
        }
        
        $this->info("\nüéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:");
        $this->info("- ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà hardcode ‡πÉ‡∏ô ApiController ‡∏î‡πâ‡∏ß‡∏¢ Universal API System");
        $this->info("- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Connection ‡∏ú‡πà‡∏≤‡∏ô API Management UI");
        $this->info("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tours ‡πÅ‡∏•‡∏∞ periods");
        $this->info("- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á promotion rules ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
    }
    
    private function createGo365Provider()
    {
        try {
            $provider = ApiProviderModel::create([
                'name' => 'GO365 API',
                'code' => 'go365',
                'base_url' => 'https://api.kaikongservice.com',
                'api_endpoint' => '/api/v1/tours/search',
                'headers' => json_encode([
                    'Content-Type' => 'application/json',
                    'x-api-key' => '${GO365_API_KEY}'
                ]),
                'status' => 'active',
                'description' => 'GO365 Tours API Integration',
                'additional_config' => json_encode([
                    'detail_endpoint' => '/api/v1/tours/detail/{id}',
                    'wholesale_id' => 41,
                    'requires_multi_step' => true
                ])
            ]);
            
            $this->info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á GO365 Provider ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ID: {$provider->id})");
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á field mappings ‡πÅ‡∏•‡∏∞ promotion rules
            $this->createFieldMappings($provider);
            $this->createPromotionRules($provider);
            
        } catch (\Exception $e) {
            $this->error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á provider: " . $e->getMessage());
        }
    }
    
    private function createFieldMappings($provider)
    {
        $tourMappings = [
            ['local_field' => 'api_id', 'api_field' => 'tour_id', 'data_type' => 'integer'],
            ['local_field' => 'code1', 'api_field' => 'tour_code', 'data_type' => 'string'],
            ['local_field' => 'name', 'api_field' => 'tour_name', 'data_type' => 'string'],
            ['local_field' => 'description', 'api_field' => 'tour_description', 'data_type' => 'string'],
            ['local_field' => 'image', 'api_field' => 'tour_cover_image', 'data_type' => 'url'],
            ['local_field' => 'country_id', 'api_field' => 'tour_country', 'data_type' => 'array', 'transformation_rule' => 'country_code_lookup'],
            ['local_field' => 'airline_id', 'api_field' => 'tour_airline.airline_iata', 'data_type' => 'string', 'transformation_rule' => 'airline_lookup'],
            ['local_field' => 'pdf_file', 'api_field' => 'tour_file.file_pdf', 'data_type' => 'url'],
        ];
        
        $periodMappings = [
            ['local_field' => 'period_api_id', 'api_field' => 'period_id', 'data_type' => 'integer'],
            ['local_field' => 'start_date', 'api_field' => 'period_date', 'data_type' => 'date'],
            ['local_field' => 'end_date', 'api_field' => 'period_back', 'data_type' => 'date'],
            ['local_field' => 'day', 'api_field' => 'tour_num_day', 'data_type' => 'integer'],
            ['local_field' => 'night', 'api_field' => 'tour_num_night', 'data_type' => 'integer'],
            ['local_field' => 'price1', 'api_field' => 'period_rate_adult_twn', 'data_type' => 'decimal'],
            ['local_field' => 'price2', 'api_field' => 'period_rate_adult_sgl', 'data_type' => 'decimal', 'transformation_rule' => 'sgl_minus_twn'],
            ['local_field' => 'price3', 'api_field' => 'period_rate_adult_twn', 'data_type' => 'decimal'],
            ['local_field' => 'price4', 'api_field' => 'period_rate_adult_twn', 'data_type' => 'decimal'],
            ['local_field' => 'group', 'api_field' => 'period_quota', 'data_type' => 'integer'],
            ['local_field' => 'count', 'api_field' => 'period_available', 'data_type' => 'integer'],
            ['local_field' => 'status_period', 'api_field' => 'period_visible', 'data_type' => 'integer', 'transformation_rule' => 'visible_to_status'],
        ];
        
        $created = 0;
        
        foreach ($tourMappings as $mapping) {
            ApiFieldMappingModel::create(array_merge($mapping, [
                'api_provider_id' => $provider->id,
                'field_type' => 'tour'
            ]));
            $created++;
        }
        
        foreach ($periodMappings as $mapping) {
            ApiFieldMappingModel::create(array_merge($mapping, [
                'api_provider_id' => $provider->id,
                'field_type' => 'period'
            ]));
            $created++;
        }
        
        $this->info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á field mappings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {$created} mappings");
    }
    
    private function createPromotionRules($provider)
    {
        $rules = [
            [
                'rule_name' => 'Fire Sale Rule',
                'condition_field' => 'discount_percentage',
                'condition_operator' => '>=',
                'condition_value' => 30.00,
                'promotion_type' => 'fire_sale',
                'promotion1_value' => 'Y',
                'promotion2_value' => 'N',
                'priority' => 1,
                'description' => '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î >= 30%'
            ],
            [
                'rule_name' => 'Normal Promotion Rule',
                'condition_field' => 'discount_percentage',
                'condition_operator' => '>',
                'condition_value' => 0.00,
                'promotion_type' => 'normal',
                'promotion1_value' => 'N',
                'promotion2_value' => 'Y',
                'priority' => 2,
                'description' => '‡πÇ‡∏õ‡∏£‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î > 0%'
            ],
            [
                'rule_name' => 'No Promotion Rule',
                'condition_field' => 'discount_percentage',
                'condition_operator' => '<=',
                'condition_value' => 0.00,
                'promotion_type' => 'none',
                'promotion1_value' => 'N',
                'promotion2_value' => 'N',
                'priority' => 3,
                'description' => '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô'
            ]
        ];
        
        foreach ($rules as $rule) {
            ApiPromotionRuleModel::create(array_merge($rule, [
                'api_provider_id' => $provider->id,
                'is_active' => true
            ]));
        }
        
        $this->info("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á promotion rules ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " . count($rules) . " rules");
    }
}